[URLS]
fvc							:	https://github.com/jankais3r/Forensic-Version-Checker/releases/latest
aim							:	https://arsenalrecon.com/downloads/
atola						:	https://atola.com/products/taskforce/download.html
autopsy						:	https://github.com/sleuthkit/autopsy/releases/latest
avml						:	https://github.com/microsoft/avml/releases/latest
axiom						:	https://www.magnetforensics.com/downloadaxiom/
bec							:	https://belkasoft.com/becver.txt
blacklight					:	https://www.blackbagtech.com/downloads/
caine						:	https://distrowatch.com/table.php?distribution=caine
cyberchef					:	https://github.com/gchq/CyberChef/releases/latest
deft						:	https://distrowatch.com/table.php?distribution=deft
eift						:	https://www.elcomsoft.com/eift.html
encase						:	https://www.guidancesoftware.com/encase-forensic
exiftool					:	https://owl.phy.queensu.ca/~phil/exiftool/history.html
ez_amcacheparser			:	https://ericzimmerman.github.io/index.md
ez_appcompatcacheparser		:	https://ericzimmerman.github.io/index.md
ez_bstrings					:	https://ericzimmerman.github.io/index.md
ez_evtxex					:	https://ericzimmerman.github.io/index.md
ez_jlecmd					:	https://ericzimmerman.github.io/index.md
ez_jumplistex				:	https://ericzimmerman.github.io/index.md
ez_lecmd					:	https://ericzimmerman.github.io/index.md
ez_mftecmd					:	https://ericzimmerman.github.io/index.md
ez_mftexplorer				:	https://ericzimmerman.github.io/index.md
ez_pecmd					:	https://ericzimmerman.github.io/index.md
ez_rbcmd					:	https://ericzimmerman.github.io/index.md
ez_recentfilecacheparser	:	https://ericzimmerman.github.io/index.md
ez_registryex				:	https://ericzimmerman.github.io/index.md
ez_sdbex					:	https://ericzimmerman.github.io/index.md
ez_shellbagex				:	https://ericzimmerman.github.io/index.md
ez_timelineex				:	https://ericzimmerman.github.io/index.md
ez_vscmount					:	https://ericzimmerman.github.io/index.md
ez_wxtcmd					:	https://ericzimmerman.github.io/index.md
fec							:	https://www.metaspike.com/fec-change-log/
forensicexplorer			:	http://www.forensicexplorer.com/version.php
ffn							:	http://updates.logicube.com/Falcon-Neo/
fresponse					:	https://f-response.com/currver
ftk							:	https://accessdata.com/product-download
ftkimager					:	https://accessdata.com/product-download
hashcat						:	https://hashcat.net/beta/
hstex						:	https://www.digital-detective.net/start/hstex-quick-start/
irec						:	http://www.binalyze.com/check-update/1/
ive							:	https://berla.co/customer-support/
lime						:	https://github.com/504ensicsLabs/LiME/releases/latest
macquisition				:	https://www.blackbagtech.com/downloads/
mobiledit					:	https://www.mobiledit.com/downloads
mountimagepro				:	http://www.mountimage.com/download-computer-forensics-software.php
netanalysis					:	https://www.digital-detective.net/start/netanalysis-quick-start/
nirsoft						:	https://launcher.nirsoft.net/downloads/index.html
nsrl						:	https://s3.amazonaws.com/rds.nsrl.nist.gov/RDS/current/README.txt
osf							:	https://www.passmark.com/padfiles/osforensics.xml
oxygen						:	https://oxygen-forensic.com/update/oxydetective.inf
paraben						:	https://paraben.com/paraben-downloads/
passware					:	https://account.passware.com/products/changelog/55
physicalanalyzer			:	https://cdn5.cellebrite.org/Forensic/Physical%%20Analyzer/_Manifest/PhysicalAnalyzer.xml
sleuthkit					:	https://github.com/sleuthkit/sleuthkit/releases/latest
tzworks						:	https://tzworks.net/prototype_page.php?proto_id=32
ufed4pc						:	https://cdn5.cellebrite.org/Forensic/UFED/_Manifest/update.UFED4PC
usbdetective				:	https://usbdetective.com/release-notes/
veracrypt					:	https://www.veracrypt.fr/en/Downloads.html
xamn						:	https://www.msab.com/downloads/
xways						:	https://www.x-ways.net/forensics/index-m.html

[PARSERS]
aim_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
				\t\t\tversion = soup.select_one('h4').text.strip()
				\t\t\tversion = version.replace('Arsenal Image Mounter v', '')
				\t\t\tversion = version.split(' ')[0]

atola_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
				\t\t\tversion = soup.select_one('a[href^="http://dl.atola.com/taskforce/"]').text.strip()
				\t\t\tversion = version.replace('Download ', '')

autopsy_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
					\t\t\tversion = soup.find('div', {'class': 'release-header'}).select_one('a').text.strip()
					\t\t\tversion = version.replace('Autopsy ', '')

avml_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
				\t\t\tversion = soup.find('div', {'class': 'release-header'}).select_one('a').text.strip()
				\t\t\tversion = version.replace('v', '')

axiom_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
				\t\t\tversion = soup.select_one('h2').text.strip()
				\t\t\tversion = version.replace('MAGNET AXIOM ', '').replace('Magnet AXIOM ', '')

bec_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
				\t\t\tversion = soup.text.strip()

blacklight_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
						\t\t\tversion = soup.find('dl', {'id': 'blacklightrevision'}).select_one('span').text.strip()
						\t\t\tversion = version.replace('BlackLight ', '')

caine_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
				\t\t\tversion = soup.find('td', {'class': 'TablesInvert'}).text.strip()

cyberchef_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
					\t\t\tversion = soup.find('div', {'class': 'release-header'}).select_one('a').text.strip()
					\t\t\tversion = version.replace('v', '')

deft_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
				\t\t\tversion = soup.find('td', {'class': 'TablesInvert'}).text.strip()

eift_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
				\t\t\tversion = soup.find('h4', {'class': 'green'}).text.strip()
				\t\t\tversion = version.replace('Elcomsoft iOS Forensic Toolkit v.', '')

encase_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
					\t\t\tversion = soup.select_one('h3').text.strip()
					\t\t\tversion = version.replace('EnCase Forensic ', '')
					\t\t\tversion = version.split(':')[0]

exiftool_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
					\t\t\tversion = soup.findAll('a')[3]['name']
					\t\t\tversion = version.replace('v', '')

ez_amcacheparser_parser : 	\t\t\tsoup = response[used_tools_counter].text
							\t\t\tversion = soup[soup.find('| AmcacheParser | [') + 19:soup.find(']',soup.find('| AmcacheParser | [') + 19)]
							\t\t\tversion = version.strip()

ez_appcompatcacheparser_parser : 	\t\t\tsoup = response[used_tools_counter].text
									\t\t\tversion = soup[soup.find('| AppCompatCacheParser | [') + 26:soup.find(']',soup.find('| AppCompatCacheParser | [') + 26)]
									\t\t\tversion = version.strip()

ez_bstrings_parser : 	\t\t\tsoup = response[used_tools_counter].text
						\t\t\tversion = soup[soup.find('| bstrings | [') + 14:soup.find(']',soup.find('| bstrings | [') + 14)]
						\t\t\tversion = version.strip()

ez_evtxex_parser : 	\t\t\tsoup = response[used_tools_counter].text
					\t\t\tversion = soup[soup.find('| Evtx Explorer/EvtxECmd | [') + 28:soup.find(']',soup.find('| Evtx Explorer/EvtxECmd | [') + 28)]
					\t\t\tversion = version.strip()

ez_jlecmd_parser : 	\t\t\tsoup = response[used_tools_counter].text
					\t\t\tversion = soup[soup.find('| JLECmd | [') + 12:soup.find(']',soup.find('| JLECmd | [') + 12)]
					\t\t\tversion = version.strip()

ez_jumplistex_parser : 	\t\t\tsoup = response[used_tools_counter].text
						\t\t\tversion = soup[soup.find('| JumpList Explorer | [') + 23:soup.find(']',soup.find('| JumpList Explorer | [') + 23)]
						\t\t\tversion = version.strip()

ez_lecmd_parser : 	\t\t\tsoup = response[used_tools_counter].text
					\t\t\tversion = soup[soup.find('| LECmd  | [') + 12:soup.find(']',soup.find('| LECmd  | [') + 12)]
					\t\t\tversion = version.strip()

ez_mftecmd_parser : 	\t\t\tsoup = response[used_tools_counter].text
						\t\t\tversion = soup[soup.find('| MFTECmd |[') + 12:soup.find(']',soup.find('| MFTECmd |[') + 12)]
						\t\t\tversion = version.strip()

ez_mftexplorer_parser : 	\t\t\tsoup = response[used_tools_counter].text
							\t\t\tversion = soup[soup.find('| MFTExplorer |[') + 16:soup.find(']',soup.find('| MFTExplorer |[') + 16)]
							\t\t\tversion = version.strip()

ez_pecmd_parser : 	\t\t\tsoup = response[used_tools_counter].text
					\t\t\tversion = soup[soup.find('| PECmd  | [') + 12:soup.find(']',soup.find('| PECmd  | [') + 12)]
					\t\t\tversion = version.strip()

ez_rbcmd_parser : 	\t\t\tsoup = response[used_tools_counter].text
					\t\t\tversion = soup[soup.find('| RBCmd  | [') + 12:soup.find(']',soup.find('| RBCmd  | [') + 12)]
					\t\t\tversion = version.strip()

ez_recentfilecacheparser_parser : 	\t\t\tsoup = response[used_tools_counter].text
									\t\t\tversion = soup[soup.find('| RecentFileCacheParser | [') + 27:soup.find(']',soup.find('| RecentFileCacheParser | [') + 27)]
									\t\t\tversion = version.strip()

ez_registryex_parser : 	\t\t\tsoup = response[used_tools_counter].text
						\t\t\tversion = soup[soup.find('| Registry Explorer/RECmd | [') + 29:soup.find(']',soup.find('| Registry Explorer/RECmd | [') + 29)]
						\t\t\tversion = version.strip()

ez_sdbex_parser : 	\t\t\tsoup = response[used_tools_counter].text
					\t\t\tversion = soup[soup.find('| SDB Explorer | [') + 18:soup.find(']',soup.find('| SDB Explorer | [') + 18)]
					\t\t\tversion = version.strip()

ez_shellbagex_parser : 	\t\t\tsoup = response[used_tools_counter].text
						\t\t\tversion = soup[soup.find('| ShellBags Explorer | [') + 24:soup.find(']',soup.find('| ShellBags Explorer | [') + 24)]
						\t\t\tversion = version.strip()

ez_timelineex_parser : 	\t\t\tsoup = response[used_tools_counter].text
						\t\t\tversion = soup[soup.find('| Timeline Explorer | [') + 23:soup.find(']',soup.find('| Timeline Explorer | [') + 23)]
						\t\t\tversion = version.strip()

ez_vscmount_parser : 	\t\t\tsoup = response[used_tools_counter].text
						\t\t\tversion = soup[soup.find('| VSCMount |[') + 13:soup.find(']',soup.find('| VSCMount |[') + 13)]
						\t\t\tversion = version.strip()

ez_wxtcmd_parser : 	\t\t\tsoup = response[used_tools_counter].text
					\t\t\tversion = soup[soup.find('| WxTCmd | [') + 12:soup.find(']',soup.find('| WxTCmd | [') + 12)]
					\t\t\tversion = version.strip()

fec_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
				\t\t\twhile True:
				\t\t\t	try:
				\t\t\t		soup.find(text = re.compile('Remote Authenticator v')).parent.extract()
				\t\t\t	except:
				\t\t\t		break
				\t\t\tversion = soup.select_one('h4').text.strip()
				\t\t\tversion = version.split(' ')[0]
				\t\t\tversion = version.replace('v', '')

forensicexplorer_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
							\t\t\tversion = soup.text.strip()
							\t\t\tversion = version.replace('v', '')

ffn_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
				\t\t\tversion = soup.find(text = re.compile('\.zip')).strip()
				\t\t\tversion = version.replace('falcon-neo_V', '')
				\t\t\tversion = version.replace('.zip', '')

fresponse_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
					\t\t\tversion = soup.text.strip()

ftk_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
				\t\t\tversion = soup.select_one('a[href^="http://accessdata.com/product-download/forensic-toolkit-ftk-version"]').parent.parent.select_one('h5').text.strip()
				\t\t\tversion = version.replace('Forensic Toolkit (FTK) version ', '')

ftkimager_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
					\t\t\tversion = soup.select_one('a[href^="http://accessdata.com/product-download/ftk-imager-version"]').parent.parent.select_one('h5').text.strip()
					\t\t\tversion = version.replace('FTK Imager version ', '')

hashcat_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
					\t\t\tversion = soup.select_one('a[href^="hashcat-"]')['href']
					\t\t\tversion = version.replace('hashcat-', '')
					\t\t\tversion = version.replace('%%2B', '+')
					\t\t\tversion = version.replace('.7z', '')

hstex_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
				\t\t\tversion = soup.find('span', {'class': 'avia_iconbox_title'}).text.strip()
				\t\t\tversion = version.replace('Download HstEx v', '')

irec_parser : 	\t\t\tsoup = response[used_tools_counter].text
				\t\t\tversion = soup[soup.find('"LatestVersion":"') + 17:soup.find('"',soup.find('"LatestVersion":"') + 17)]

ive_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
				\t\t\tversion = soup.select_one('a[href^="https://berla.co/release-resources-ive"]')['title']
				\t\t\tversion = version.replace('Release Resources: iVe v', '')

lime_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
				\t\t\tversion = soup.find('span', {'class': 'css-truncate-target'}).text.strip()
				\t\t\tversion = version.replace('v', '')

macquisition_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
						\t\t\tversion = soup.find('dl', {'id': 'macquisitionrevision'}).select_one('span').text.strip()
						\t\t\tversion = version.replace('MacQuisition ', '')

mobiledit_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
					\t\t\tversion = soup.select_one('a[href^="/forensic-express/whats-new"]').previous_sibling.text
					\t\t\tversion = version.replace('|', '')
					\t\t\tversion = version.strip()

mountimagepro_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
						\t\t\tversion = soup.select_one('a[href^="http://download.getdata.com/support/mip/MountImagePro"]')['href']
						\t\t\tversion = version[version.index('(v'):]
						\t\t\tversion = version[2:-5]

netanalysis_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
						\t\t\tversion = soup.find('span', {'class': 'avia_iconbox_title'}).text.strip()
						\t\t\tversion = version.replace('Download NetAnalysis v', '')

nirsoft_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
					\t\t\tversion = soup.find(text = re.compile('Current Package Version:')).next_sibling.contents[0].strip()

nsrl_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
				\t\t\tversion = soup.text.strip()
				\t\t\tversion = version.replace('NSRL RDS Version ', '')
				\t\t\tversion = version.split(' ')[0]

osf_parser : 	\t\t\ttree = ElementTree.fromstring(response[used_tools_counter].text)
				\t\t\tversion = tree.findall('.//Program_Info/Program_Version')[0].text

oxygen_parser : 	\t\t\tsoup = response[used_tools_counter].text
					\t\t\tversion = soup[soup.find('newversion=') + 11:soup.find('\n',soup.find('newversion=') + 11)]
					\t\t\tversion = version.strip()

paraben_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
					\t\t\tversion = soup.select_one('a[href^="https://1drv.ms/"]').text.strip()
					\t\t\tversion = version.replace('OneDrive Download x64Version ', '')

passware_parser : 	\t\t\tsoup = response[used_tools_counter].text
					\t\t\tversion = soup[soup.find('"fullVersion": "') + 16:soup.find('"',soup.find('"fullVersion": "') + 16)]

physicalanalyzer_parser : 	\t\t\ttree = ElementTree.fromstring(response[used_tools_counter].text)
							\t\t\tversion = tree.findall('.//CurrentVersion')[0].text

sleuthkit_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
					\t\t\tversion = soup.find('div', {'class': 'release-header'}).select_one('a').text.strip()
					\t\t\tversion = version.replace('The Sleuth Kit ', '')

tzworks_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
					\t\t\tversion = soup.select_one('h3').text.strip()
					\t\t\tversion = version.replace(' build (package)', '')

ufed4pc_parser : 	\t\t\ttree = ElementTree.fromstring(response[used_tools_counter].text)
					\t\t\tversion = tree.attrib['updateVersion']

usbdetective_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
						\t\t\tversion = soup.select_one('h2').text.strip()
						\t\t\tversion = version.replace('Version ', '')
						\t\t\tversion = version.split(' ')[0]

veracrypt_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
					\t\t\tversion = soup.select_one('a[href^="https://launchpad.net/veracrypt/trunk/"]')['href']
					\t\t\tversion = version.split('/')[5]

xamn_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
				\t\t\tversion = soup.find('a', {'class': 'wpfd_downloadlink'})['title']
				\t\t\tversion = version.replace('XAMN v', '')

xways_parser : 	\t\t\tsoup = BeautifulSoup(response[used_tools_counter].text, 'html.parser')
				\t\t\tversion = soup.find('div', {'class': 'content'}).select_one('b').text.strip()
				\t\t\tversion = version[19:].strip()
